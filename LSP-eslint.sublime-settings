{
	"settings": {
		// Show disable lint rule in the quick fix menu.
		"codeAction.disableRuleComment": {
			// Show the disable code actions.
			"enable": true,
			// Configure the disable rule code action to insert the comment on the `sameLine` or `separateLine`.
			"location": "separateLine",
			// The comment style to use when disabling a rule on a specific line.
			"commentStyle": "line"
		},
		// Show open lint rule documentation web page in the quick fix.
		"codeAction.showDocumentation": {
			// Show the documentation code actions.
			"enable": true
		},
		"codeActionOnSave.enable": true,
		// Specifies the code action mode. Possible values are 'all' and 'problems'.
		"codeActionOnSave.mode": "all",
		// Enables support for experimental Flat Config (aka `eslint.config.js`, supported by ESLint version 8.21 or later).
		"experimental.useFlatConfig": false,
		// The rules that should be executed when computing the code actions on save or formatting a file.
		// Defaults to the rules configured via the ESLint configuration.
		// An empty array results in no rules being considered.
		// If the array contains more than one entry the order matters and the first match determines the rule's
		// on/off state. This setting is only honored if either ESLint version 8 or greater is used or ESLint
		// version 7 is used and the setting `useESLintClass` is set to `true`.
		//
		// In this example only semicolon related rules are considered:
		//
		// ```json
		// "codeActionOnSave.rules": [
		//   "*semi*"
		// ]
		// ```
		//
		// This example removes all TypeScript ESLint specific rules from the code action on save pass but
		// keeps all other rules:
		//
		// ```json
		// "codeActionOnSave.rules": [
		//   "!@typescript-eslint/*",
		//   "*"
		// ]
		// ```
		//
		// This example keeps the indent and semi rule from TypeScript ESLint, disables all other TypeScript
		// ESLint rules and keeps the rest:
		//
		// ```json
		// "codeActionOnSave.rules": [
		 //  "@typescript-eslint/semi",
		 //  "@typescript-eslint/indent",
		 //  "!@typescript-eslint/*",
		 //  "*"
		// ]
		// ```
		// "codeActionOnSave.rules": [],
		// Deprecated. Recommended to use the global LSP option `lsp_code_actions_on_save` with the.
		// `"source.fixAll.eslint": true` key instead.
		"format": false,
		// If true, untitled files won't be validated by ESLint.
		"ignoreUntitled": false,
		// A path added to NODE_PATH when resolving the eslint module (auto-detected by default).
		"nodePath": null,
		// Whether ESLint should issue a warning on ignored files.
		// Possible values: `warn`, `off`
		"onIgnoredFiles": "off",
		// Options to configure how ESLint is started using the [ESLint class API](http://eslint.org/docs/developer-guide/nodejs-api#eslint-class).
		// The server uses the ESLint class API if ESLint version 8 or higher is used or if ESLint version 7 is used,
		// and the setting `useESLintClass` is set to `true`. I all other cases the old CLIEngine API is used.
		// An example to point to a custom `.eslintrc.json` file using the new ESLint API is:
		// ```json
		// {
		//   "eslint.options": { "overrideConfigFile": "C:/mydirectory/.eslintrc.json" }
		// }
		// ```
		// An example to point to a custom `.eslintrc.json` file using the old CLIEngine API is:
		// ```json
		// {
		//   "eslint.options": { "configFile": "C:/mydirectory/.eslintrc.json" }
		// }
		// ```
		"options": {},
		// The package manager you use to install node modules.
		// Possible values: `npm`, `yarn`, `pnpm`
		"packageManager": "npm",
		// An array of language ids for which the plugin should probe if support is installed.
		"probe": [
			"javascript",
			"javascriptreact",
			"typescript",
			"typescriptreact",
			"html",
			"vue",
			"markdown",
		],
		// Shortens the text spans of underlined problems to their first related line.
		"problems.shortenToSingleLine": false,
		// Override the severity of one or more rules, regardless of the project's ESLint config. Use globs to
		// apply default severities for multiple rules.
		"rulesCustomizations": [],
		// Turns on quiet mode, which ignores warnings.
		"quiet": false,
		// Run the linter on save or on type.
		// Possible values: `onSave`, `onType`
		"run": "onType",
		// Whether to use the ESLint class API even if the CLIEngine API is present. The setting is only honored
		// when using using ESLint version 7.x.
		"useESLintClass": false,
		// An array of language ids which should be validated by ESLint.
		"validate": [
			"javascript",
			"javascriptreact",
		],
		// An optional list of working directories or a setting on how those are auto-resolved.
		//
		// This setting will normally only be set per-project to provide a list of working
		// directories. The server will consider those as bases for resolving the eslint configuration.
		//
		// Refer to the `eslint.workingDirectories` documentation at https://github.com/Microsoft/vscode-eslint
		// for more info.
		//
		// NOTE that the `{ "pattern": glob pattern }` variant is not supported in LSP-eslint.
		// "workingDirectories": null
	},
	// File watching functionality only works with "LSP-file-watcher-chokidar" package installed.
	"file_watcher": {
		"patterns": [
			"**/.eslintr{c.js,c.cjs,c.yaml,c.yml,c,c.json}",
			"**/.eslintignore",
			"**/package.json",
		]
	},
	"command": ["${node_bin}", "${server_path}", "--stdio"],
	"selector": "source.js | source.ts | source.jsx | source.tsx | source.js.jsx | source.js.react | source.ts.react | text.html.vue | text.html.basic",
	"env": {
		// Enables ESLint debug mode
		// "DEBUG": "eslint:*,-eslint:code-path",
		// The value of `NODE_ENV` to use when running eslint tasks.
		// "NODE_ENV": "production",
	},
}
