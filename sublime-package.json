{
  "contributions": {
    "settings": [
      {
        "file_patterns": [
          "/LSP-eslint.sublime-settings"
        ],
        "schema": {
          "$id": "sublime://settings/LSP-eslint",
          "definitions": {
            "PluginConfig": {
              "properties": {
                "env": {
                  "properties": {
                    "DEBUG": {
                      "type": "string",
                      "default": "",
                      "description": "Enables ESLint debug mode (same as --debug on the command line)"
                    },
                    "NODE_ENV": {
                      "type": "string",
                      "default": "",
                      "markdownDescription": "The value of `NODE_ENV` to use when running eslint tasks."
                    },
                  }
                },
                "settings": {
                  "additionalProperties": false,
                  "properties": {
                    "problems.shortenToSingleLine": {
                      "type": "boolean",
                      "default": false,
                      "description": "Shortens the text spans of underlined problems to their first related line.",
                      "scope": "resource"
                    },
                    "experimental.useFlatConfig": {
                      "scope": "resource",
                      "type": "boolean",
                      "default": false,
                      "description": "Enables support for experimental Flat Config (aka `eslint.config.js`, supported by ESLint version 8.21 or later)."
                    },
                    "codeActionOnSave.enable": {
                      "type": "boolean",
                      "default": true,
                      "description": "Enables functionality to run code actions on save."
                    },
                    "codeActionOnSave.mode": {
                      "type": "string",
                      "default": "all",
                      "enum": [
                        "all",
                        "problems"
                      ],
                      "enumDescriptions": [
                        "Fixes all possible problems in the file. This option might take some time.",
                        "Fixes only reported problems that have non-overlapping textual edits. This option runs a lot faster."
                      ],
                      "markdownDescription": "Specifies the code action mode. Possible values are `all` and `problems`."
                    },
                    "codeActionOnSave.rules": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "default": [],
                      "markdownDescription": "The rules that should be executed when computing the code actions on save or formatting a file. Defaults to the rules configured via the ESLint configuration. An empty array results in no rules being considered.\nIf the array contains more than one entry the order matters and the first match determines the rule's on / off state. This setting is only honored if either ESLint version 8 or greater is used or ESLint version 7 is used and the setting `useESLintClass` is set to `true`.\n\nIn this example only semicolon related rules are considered:\n\n\n```json\n\"codeActionOnSave.rules\": [\n  \"*semi*\"\n]\n```\n\n\nThis example removes all TypeScript ESLint specific rules from the code action on save pass but keeps all other rules:\n\n\n```json\n\"codeActionOnSave.rules\": [\n  \"!@typescript-eslint/*\",\n  \"*\"\n]\n```\n\n\nThis example keeps the indent and semi rule from TypeScript ESLint, disables all other TypeScript ESLint rules and keeps the rest:\n\n\n```json\n\"codeActionOnSave.rules\": [\n  \"@typescript-eslint/semi\",\n  \"@typescript-eslint/indent\",\n  \"!@typescript-eslint/*\",\n  \"*\"\n]\n```"
                    },
                    "format": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "**Deprecated**. Enables DocumentFormattingRequest notification.\n\nRecommended to use global LSP option `lsp_code_actions_on_save` with the `\"source.fixAll.eslint\": true` key instead."
                    },
                    "packageManager": {
                      "type": "string",
                      "enum": [
                        "npm",
                        "yarn",
                        "pnpm"
                      ],
                      "default": "npm",
                      "description": "The package manager you use to install node modules."
                    },
                    "nodePath": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "default": null,
                      "markdownDescription": "A path added to `NODE_PATH` when resolving the eslint module."
                    },
                    "options": {
                      "type": "object",
                      "default": {},
                      "markdownDescription": "Options to configure how ESLint is started using the [ESLint class API](https://eslint.org/docs/developer-guide/nodejs-api#eslint-class). The extension uses the ESLint class API if ESLint version 8 or higher is used or if ESLint version 7 is used and the setting `useESLintClass` is set to `true`. In all other cases the old CLIEngine API is used.\n\n  An example to point to a custom `.eslintrc.json` file using the new ESLint API is:\n  ```json\n  {\n    \"eslint.options\": { \"overrideConfigFile\": \"C:/mydirectory/.eslintrc.json\" }\n  }\n ```\n\n  An example to point to a custom `.eslintrc.json` file using the old CLIEngine API is:\n  ```json\n  {\n    \"eslint.options\": { \"configFile\": \"C:/mydirectory/.eslintrc.json\" }\n  }\n  ```"
                    },
                    "useESLintClass": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "Whether to use the ESLint class API even if the CLIEngine API is present. The setting is only honored when using using ESLint version 7.x."
                    },
                    "ignoreUntitled": {
                      "scope": "resource",
                      "type": "boolean",
                      "default": false,
                      "description": "If true, untitled files won't be validated by ESLint."
                    },
                    "probe": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "default": [
                        "javascript",
                        "javascriptreact",
                        "typescript",
                        "typescriptreact",
                        "html",
                        "vue",
                        "markdown"
                      ],
                      "description": "An array of language ids for which the plugin should probe if support is installed."
                    },
                    "run": {
                      "type": "string",
                      "enum": [
                        "onSave",
                        "onType"
                      ],
                      "default": "onType",
                      "markdownDescription": "Run the linter on save (`onSave`) or on type (`onType`)"
                    },
                    "quiet": {
                      "type": "boolean",
                      "default": false,
                      "description": "Turns on quiet mode, which ignores warnings."
                    },
                    "onIgnoredFiles": {
                      "type": "string",
                      "enum": [
                        "warn",
                        "off"
                      ],
                      "default": "off",
                      "description": "Whether ESLint should issue a warning on ignored files."
                    },
                    "workingDirectories": {
                      "type": "array",
                      "markdownDescription": "Specifies how the working directories ESLint is using are computed. ESLint resolves configuration files (e.g. `eslintrc`, `.eslintignore`) relative to a working directory so it is important to configure this correctly.",
                      "defaultSnippets": [
                        {
                          "body": [
                            "./folder1",
                            "./folder2",
                          ]
                        },
                        {
                          "body": [
                            {
                              "mode": "location"
                            }
                          ]
                        },
                        {
                          "body": [
                            {
                              "directory": "./folder",
                              "!cwd": true
                            }
                          ]
                        }
                      ],
                      "items": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "The project-relative path of the working directory."
                          },
                          {
                            "type": "object",
                            "properties": {
                              "mode": {
                                "type": "string",
                                "enum": [
                                  "auto",
                                  "location"
                                ],
                                "markdownEnumDescriptions": [
                                  "Instructs ESLint to infer a working directory based on the location of `package.json`, `.eslintignore` and `.eslintrc*` files. This might work in many cases but can lead to unexpected results as well.",
                                  "Instructs ESLint to uses the workspace folder location or the file location (if no workspace folder is open) as the working directory. This is the default."
                                ],
                                "default": "location",
                              },
                            },
                            "required": [
                              "mode"
                            ]
                          },
                          {
                            "type": "object",
                            "properties": {
                              "directory": {
                                "type": "string",
                                "description": "The working directory to use if a file's path starts with this directory."
                              },
                              "changeProcessCWD": {
                                "type": "boolean",
                                "description": "Whether the process's cwd should be changed as well."
                              }
                            },
                            "deprecationMessage": "Use the new !cwd form.",
                            "required": [
                              "directory"
                            ]
                          },
                          {
                            "type": "object",
                            "properties": {
                              "directory": {
                                "type": "string",
                                "description": "The working directory to use if a file's path starts with this directory."
                              },
                              "!cwd": {
                                "type": "boolean",
                                "description": "Set to true if ESLint shouldn't change the working directory."
                              }
                            },
                            "required": [
                              "directory"
                            ]
                          },
                          {
                            "type": "object",
                            "properties": {
                              "pattern": {
                                "type": "string",
                                "description": "A glob pattern to match a working directory."
                              },
                              "!cwd": {
                                "type": "boolean",
                                "description": "Set to true if ESLint shouldn't change the working directory."
                              }
                            },
                            "markdownDescription": "**Not supported in ST**. Allows to specify a pattern to detect the working directory. This is basically a short cut for listing every directory. If you have a mono repository with all your projects being below a packages folder you can use `{ \"pattern\": \"./packages/*/\" }` to make all these folders working directories.",
                            "required": [
                              "pattern"
                            ]
                          }
                        ]
                      }
                    },
                    "validate": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "default": [
                        "javascript",
                        "javascriptreact"
                      ],
                      "description": "An array of language ids which should be validated by ESLint. If not installed ESLint will show an error."
                    },
                    "codeAction.disableRuleComment": {
                      "type": "object",
                      "default": {
                        "enable": true,
                        "location": "separateLine",
                        "commentStyle": "line"
                      },
                      "properties": {
                        "enable": {
                          "type": "boolean",
                          "default": true,
                          "description": "Show the disable code actions."
                        },
                        "location": {
                          "type": "string",
                          "enum": [
                            "separateLine",
                            "sameLine"
                          ],
                          "default": "separateLine",
                          "description": "Configure the disable rule code action to insert the comment on the same line or a new line."
                        },
                        "commentStyle": {
                          "type": "string",
                          "enum": [
                            "line",
                            "block"
                          ],
                          "default": "line",
                          "definition": "The comment style to use when disabling a rule on a specific line."
                        }
                      },
                      "additionalProperties": false,
                      "markdownDescription": "Show disable lint rule in the quick fix menu."
                    },
                    "codeAction.showDocumentation": {
                      "type": "object",
                      "default": {
                        "enable": true
                      },
                      "properties": {
                        "enable": {
                          "type": "boolean",
                          "default": true,
                          "description": "Show the documentation code actions."
                        }
                      },
                      "additionalProperties": false,
                      "markdownDescription": "Show open lint rule documentation web page in the quick fix menu."
                    },
                    "rulesCustomizations": {
                      "markdownDescription": "Override the severity of one or more rules, regardless of the project's ESLint config. Use globs to apply default severities for multiple rules. Contains two properties:\n\n - `\"rule\"`: Select on rules with names that match, factoring in asterisks as wildcards: `{ \"rule\": \"no-*\", \"severity\": \"warn\" }`. Prefix the name with a `\"!\"` to target all rules that _don't_ match the name: `{ \"rule\": \"!no-*\", \"severity\": \"info\" }`\n - `\"severity\"`: Sets a new severity for matched rule(s), `\"downgrade\"`s them to a lower severity, `\"upgrade\"`s them to a higher severity, or `\"default\"`s them to their original severity\n\nIn this example, all rules are overridden to warnings:\n```json\n\"eslint.rules.customizations\": [\n  { \"rule\": \"*\", \"severity\": \"warn\" }\n]\n```\n\nIn this example, `no-` rules are informative, other rules are downgraded, and `\"radix\"` is reset to default:\n```json\n\"eslint.rules.customizations\": [\n  { \"rule\": \"no-*\", \"severity\": \"info\" },\n  { \"rule\": \"!no-*\", \"severity\": \"downgrade\" },\n  { \"rule\": \"radix\", \"severity\": \"default\" }\n]\n```",
                      "items": {
                        "properties": {
                          "severity": {
                            "enum": [
                              "downgrade",
                              "error",
                              "info",
                              "default",
                              "upgrade",
                              "warn",
                              "off"
                            ],
                            "type": "string"
                          },
                          "rule": {
                            "type": "string"
                          },
                        },
                        "required": ["severity", "rule"],
                        "defaultSnippets": [
                          {
                            "body": {
                              "rule": "$1",
                              "severity": "$0"
                            }
                          }
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  }
                }
              },
            },
          },
          "allOf": [
            {
              "$ref": "sublime://settings/LSP-plugin-base"
            },
            {
              "$ref": "sublime://settings/LSP-eslint#/definitions/PluginConfig"
            }
          ],
        }
      },
      {
        "file_patterns": [
          "/*.sublime-project"
        ],
        "schema": {
          "properties": {
            "settings": {
              "properties": {
                "LSP": {
                  "properties": {
                    "LSP-eslint": {
                      "$ref": "sublime://settings/LSP-eslint#/definitions/PluginConfig"
                    }
                  }
                }
              }
            }
          }
        }
      },
    ]
  }
}
